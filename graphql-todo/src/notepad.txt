const { typeDefs } = require("./schema");
const { resolvers } = require("./resolvers");
const { ApolloServer } = require("apollo-server-express");
const { PubSub } = require("graphql-subscriptions");
const { getUser } = require("./helpers/verifyToken");
const express = require("express");
const { createServer } = require("http");
const { execute, subscribe, buildSchema, print } = require("graphql");
const { SubscriptionServer } = require("subscriptions-transport-ws");

const pubsub = new PubSub();

async function startServer() {
  const app = express();

  const server = new ApolloServer({
    typeDefs,
    resolvers,
    introspection: true,
    uploads: true,
    context: async ({ req, res }) => {
      const token = req.headers.authorization || "";
      const user = await getUser(token);
      return { user, pubsub };
    },
  });

  await server.start(); 

  server.applyMiddleware({ app });

  const httpServer = createServer(app);

  const schema = buildSchema(print(typeDefs));

  SubscriptionServer.create(
    {
      schema,
      execute,
      subscribe,
    },
    {
      server: httpServer,
      path: '/graphql',
    }
  );

  const PORT = process.env.PORT || 4000;

  httpServer.listen(PORT, () => {
    console.log(`ðŸš€ Server ready at http://localhost:${PORT}${server.graphqlPath}`);
    console.log(`ðŸš€ Subscriptions ready at ws://localhost:${PORT}/graphql`);
  });
}

startServer();
